`ifndef INCLUDED_<%=@name%>_svh
`define INCLUDED_<%=@name%>_svh

import srm_pkg::*;
import uvm_pkg::*;

class <%=name%> extends srm_component;
<% for node in nodes %>
  //------------------------------------------------------
  // Register <%=node.name%>
  //------------------------------------------------------
  typedef struct packed {
    <%for field in node.fields%>
    reg[<%=field.msb_pos%>:<%=field.lsb_pos%>] <%=field.name%>;
    <%end%>
  } <%=node.name%>_struct_t;

  // Constraint Class
  class <%=node.name%>_constr extends uvm_object;
     `uvm_object_utils(<%=node.name%>_constr)
    <%for field in node.fields%>
     rand bit[<%=field.msb_pos%>:<%=field.lsb_pos%>] <%=field.name%>;
    <%end%>
     function new(string name="<%=node.name%>_constr");
       super.new(name);
     endfunction

     function <%=node.name%>_struct_t get_data();
       <%=node.name%>_struct_t d;
      <%for field in node.fields%>
       d.<%=field.name%> = <%=field.name%>
      <%end%>
     endfunction
  endclass

  class <%=node.name%>_reg extends srm_reg#(<%=node.name%>_struct_t);
    <%for field in node.fields%>
    srm_field#(bit[<%=field.msb_pos%>:<%=field.lsb_pos%>]) <%=field.name%>;
    <%end%>

    function new(string name, srm_component parent);
      super.new(name, parent);
      <%for reset_kind in node.reset_kinds%>
      set_reset_kind("<%=reset_kind%>");
      <%end%>
      <%for field in node.fields%>
      <%=field.name%> = new(.name("<%=field.name%>", .parent(this), .nbits(<%=field.nbits%>), .lsb_pos(<%=field.lsb_pos%>), .volatile(<%=field.volatile%>));
      add_field(<%=field.name%>);
      <%field.reset_values.to_h.each_pair do |kind, value|%>
      <%=field.name%>.set_reset_value(.kind("<%=kind%>"), .value(<%=field.nbits%>'h<%=value.to_s(16)%>));
      <%end%>
      <%end%>
    endfunction

  endclass
   
<% end %>
endclass
`endif
